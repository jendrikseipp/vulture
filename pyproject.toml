[build-system]
requires = ["setuptools>=68", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "vulture"
dynamic = ["version"]
description = "Find dead code"
readme = { file = "README.md", content-type = "text/markdown" }
keywords = ["dead code removal"]
requires-python = ">=3.9"
license = { file = "LICENSE.txt" }
authors = [
  { name = "Jendrik Seipp", email = "jendrikseipp@gmail.com" },
]
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Environment :: Console",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
  "Topic :: Software Development :: Quality Assurance",
]
dependencies = [
  "tomli >= 1.1.0; python_version < '3.11'",
]

[project.urls]
Homepage = "https://github.com/jendrikseipp/vulture"
Repository = "https://github.com/jendrikseipp/vulture"
Changelog = "https://github.com/jendrikseipp/vulture/blob/main/CHANGELOG.md"

[project.scripts]
vulture = "vulture.core:main"

[tool.setuptools]
include-package-data = true

[tool.setuptools.packages.find]
exclude = ["tests", "tests.*"]

[tool.setuptools.package-data]
vulture = ["whitelists/*.py"]

[tool.setuptools.dynamic]
version = { attr = "vulture.version.__version__" }

[tool.ruff]
exclude = [
  ".eggs",
  ".git",
  "_build",
  "build",
  "dist",
  "htmlcov",
  "vulture.egg-info",
  ".cache",
  ".coverage",
  ".pytest_cache",
  ".tox",
  ".venv",
  ".vscode",
]

# Same as Black.
line-length = 79
indent-width = 4

target-version = "py39"

[tool.ruff.lint]
# ruff enables Pyflakes (`F`) and a subset of the pycodestyle (`E`) codes by default.
select = [
  "B", # flake8-bugbear
  "C4", # comprehensions
  "E", # pycodestyle
  "F", # pyflakes
  "I001", # isort
  "SIM", # flake8-simplify
  "UP", # pyupgrade
]
ignore = [
  "C408", # unnecessary dict call
  "SIM115", # Use context handler for opening files
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.per-file-ignores]
"vulture/whitelists/*.py" = ["B018"]

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

[tool.coverage.run]
omit = [".tox/*"]
parallel = true

[tool.pytest.ini_options]
addopts = "--cov vulture --cov-report=html --cov-report=term --cov-report=xml --cov-append"
